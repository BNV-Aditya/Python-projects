import tkinter as tk
import math,time,random,sys

root = tk.Tk()
main = tk.Tk()

BackLabelList = [[tk.Label(root,text = '     ',bg = 'black',fg = 'white').grid(row = j,column=i) for i in range(10)] for j in range(20)]
Matrix = [['Y' for i in range(10)] for j in range(20)]

Lrow,Lcol,RotVal = 0,0,0
CLabel,LabelNo,PieceNo = '',0,0
Event,Frames,LockF,score = '',0,0,0
LabelDict,PieceMapExport,PieceDict = {},{},{}

#Matrix[4][2],Matrix[6][8],Matrix[15][3] = 'N','N','N'

Label1 = tk.Label(main,text = 'lol',bg = 'black',fg = 'white',wraplength=135)
Label1.grid()

Label2 = tk.Label(root,text = score,bg = 'red',fg = 'white')
Label2.grid(row =20,column = 0,rowspan =1000,columnspan=100,sticky = 'E,W')

def traverse_list(list):
    Label1['text'] = Matrix

def create_label(row,col,cou):
    global CLabel,LabelDict,LabelNo,Lrow,Lcol,Piece
    LabelDict[LabelNo] = {'label':tk.Label(root,text = '     ',bg=cou,relief='raised'),'row':row,'col':col}
    LabelNo+=1

def create_piece():
    global CLabel,LabelDict,LabelNo,PieceMapExport,Lrow,Lcol,Clabel,PieceNo,PieceMapCreate,Piece,PieceMat,PosMat,PosVal
    PieceMapCreate = {
        'O':[[-1,-1],[-1,0],[0,-1],[0,0]],
        'T':[[-1,0],[0,-1],[0,0],[0,1]],
        'I':[[-1,0],[0,0],[1,0],[2,0]],
        'L':[[-1,-1],[0,-1],[1,-1],[1,0]],
        'J':[[-1,0],[0,0],[1,0],[1,-1]],
        'Z':[[-1,-1],[-1,0],[0,0],[0,1]],
        'S':[[0,-1],[0,0],[-1,0],[-1,1]]
    }
    Piececolour = {'O':'yellow','T':'mediumpurple','I':'cyan','L':'orange','J':'blue','Z':'red','S':'green'}
    Piece =random.choice(['O','I','T','L','J','Z','S'])
    PieceMat = [['Y' for i in range(4)] for j in range(4)]
    RotVal,PosVal = 0,0
    if 'N' in Matrix[0][4]: print('game over')
    else:
        for i in range(4):
            create_label(PieceMapCreate[Piece][i][0] + 1,PieceMapCreate[Piece][i][1] + 4,Piececolour[Piece])
            PieceMapExport[i] = LabelDict[LabelNo-1]
            PieceMapExport[i]['label'].grid(row = PieceMapExport[i]['row'],column = PieceMapExport[i]['col'])
            Matrix[PieceMapExport[i]['row']][PieceMapExport[i]['col']] = 'M'
            PieceMat[PieceMapExport[i]['row']][PieceMapExport[i]['col'] - 4] = 'M'
        Label1.config(text = Matrix,wraplength=120)
        PieceDict[PieceNo] = PieceMapExport
        #print(PieceMat)
        #print(PosMat)
create_piece()

def move_func(event):
    global Matrix,LockF,PieceMapExport,PosVal
    R0,R1,R2,R3,C0,C1,C2,C3 = 'F','F','F','F','F','F','F','F'
    R,C,count = [R0,R1,R2,R3],[C0,C1,C2,C3],0
    if 'Left' in str(event):
        #print('left')
        for i in PieceMapExport.values():
            if i['col']  > 0 and Matrix[i['row']][i['col']-1] != 'N' and Matrix[i['row']][i['col']-1] != 'M': 
                C[count] = i['col'] - 1
                count+=1
        if 'F' not in C:
            for i in range(len(C)):
                PieceMapExport[i]['col'] = C[i]
    elif 'Right' in str(event):
        #print('right')
        for i in PieceMapExport.values():
            if i['col']  < 9 and Matrix[i['row']][i['col']+1] != 'N' and Matrix[i['row']][i['col']+1] != 'M': 
                C[count] = i['col'] + 1
                count+=1
        if 'F' not in C:
            for i in range(len(C)):
                PieceMapExport[i]['col'] = C[i]
    elif 'Up' in str(event) :
        #print('up')
        for i in PieceMapExport.values():
            if i['row'] > 0 and Matrix[i['row']-1][i['col']] != 'N' and Matrix[i['row']-1][i['col']] != 'M':
                R[count] = i['row'] - 1
                count+=1
        if 'F' not in R:
            for i in range(len(R)):
                PieceMapExport[i]['row'] = R[i]
            '''while Lrow+1 <20 and Matrix[Lrow+1][Lcol] != 'N':Lrow = Lrow+1
            LockF = LockF+4'''
    elif 'Down' in str(event):
        #print('down')
        for i in PieceMapExport.values():
            if i['row'] < 19 and Matrix[i['row']+1][i['col']] != 'N' and Matrix[i['row']+1][i['col']] != 'M': 
                R[count] = i['row'] + 1
                count+=1
        if 'F' not in R:
            for i in range(len(R)):
                PieceMapExport[i]['row'] = R[i]
    
    for i in PieceMapExport.values():
        i['label'].grid(column = i['col'],row = i['row'])
        Matrix[i['row']][i['col']] = 'M'
        #print()
    traverse_list(Matrix)
    for i in PieceMapExport.values():
        i['label'].grid(column = i['col'],row = i['row'])
        Matrix[i['row']][i['col']] = 'Y'
    for i in PieceMapExport.values():
        if i['row'] == 19 or Matrix[i['row']+1][i['col']] == 'N' :
            LockF +=1
            lock_set()
            break
    else:
        LockF = 1
        lock_set()

def rotate(event):
    global PosVal
    for i in range(len(PieceMapExport.values())):
        if PieceMapExport[i]['row'] - PieceMapCreate[Piece][i][0] == PieceMapExport[i]['row'] and PieceMapExport[i]['col'] - PieceMapCreate[Piece][i][1] == PieceMapExport[i]['col']:
            PosVal = [PieceMapExport[i]['row'],PieceMapExport[i]['col']]
    one = 1
    if PosVal[one] == 0 or PosVal[one]+1 == 'N':
        if Piece == 'O':
            pass
        else:
            print('right')
            move_func('Right')
    elif PosVal[one] == 9 or PosVal[one]-1 == 'N':
        if Piece == 'O':
            pass
        else:
            print('left')
            move_func('Left')
    for i in range(len(PieceMapExport.values())):
        if PieceMapExport[i]['row'] - PieceMapCreate[Piece][i][0] == PieceMapExport[i]['row'] and PieceMapExport[i]['col'] - PieceMapCreate[Piece][i][1] == PieceMapExport[i]['col']:
            PosVal = [PieceMapExport[i]['row'],PieceMapExport[i]['col']]

    m = [[[PosVal[0] +i,PosVal[1] +j] for i in range(-1,2)] for j in range(-1,2)] 

    for i in range(len(m)):
        for j in range(i):
            for k in PieceMapExport.values():
                if k['row'] == m[i][j][0] and k['col'] == m[i][j][1]:
                    m[i][j].append(k)
                    break
                else: 
                    m[i][j].append('No Label')
                    break
    
    for i in range(3):
        for j in range(3):
            print(m[i][j])
    print()
    '''        matrix1 = [
            ['01','02','03'],
            ['04','05','06'],
            ['07','08','09']
        ]
        matrix2 = []
        for k in range(int(input('lol:'))):
            for i in range(len(matrix1)):
                m = []
                for j in range(len(matrix1[i])):
                    m.append(matrix1[j][2-i])
                matrix2.append(m)
            matrix1 = matrix2
            matrix2 = []
            print()'''

    

def lock_set():
    global LabelNo,Lrow,Lcol,Matrix,LockF,PieceMapExport,PieceNo
    if (LockF)%5 == 0:
        #print('lol')
        for i in PieceMapExport.values():
            i['label'].grid(column = i['col'],row = i['row'])
            Matrix[i['row']][i['col']] = 'N'
            score_func()
            PieceNo += 1
        create_piece()
        LockF = 0
    #print(LockF)

def score_func():
    global Matrix,LabelDict,score
    for r in range(len(Matrix)):
        while 'Y' not in Matrix[r]:
            del Matrix[r]
            score += 1
            Matrix.insert(0,['Y' for i in range(10)])
            for i in range(0,len(LabelDict.keys())):
                if LabelDict[i]['row'] == r:
                    LabelDict[i]['label'].destroy()
                elif LabelDict[i]['row'] < r:
                    LabelDict[i]['row'] += 1
                    LabelDict[i]['label'].grid(row = LabelDict[i]['row'],column = LabelDict[i]['col'])
    Label2['text'] = str('score:'+str(score))
    
def move_func_dir(event):
    global Event
    Event = str(event)

def auto_down():
    global Frames
    if (Frames)%10 == 0:
        move_func('Down')
    Frames += 1


def game_update():
    global Event,Frames,PosVal
    move_func(Event)
    auto_down()
    Lock = False
    Event = ' '

    root.after(100,game_update)


root.bind('<Down>',move_func_dir)
#root.bind('<Up>',move_func_dir)
root.bind('<Left>',move_func_dir)
root.bind('<Right>',move_func_dir)
root.bind('<Up>',rotate)
root.after(100,game_update)

root.geometry('210x450+200+200')
main.geometry('160x320+500+200')
main.mainloop()
root.mainloop() 
